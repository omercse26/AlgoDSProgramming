#include <cstdio>
#include <variant>
#include <array>
#include <type_traits>
#include <iomanip>

template <unsigned long size, typename Key, typename ParentCache, typename ...Types>
struct cache
{
  // sizeof(std::variant<Types...>) can be more than the size of the largest type 
  // due to alignment reasons.
  
  struct cache_content
  {
    bool dirty_bit;
    bool valid;
    std::variant<Types...> data;
  };
  
  constexpr static auto array_size = size/sizeof(cache_content);
  std::array<cache_content, array_size> contents;
  
  auto getIndex(Key key)
  {
    if constexpr (std::is_arithmetic_v<Key>)
    {
      return static_cast<unsigned long>(key) % array_size;
    }
    else if constexpr (std::is_same_v<Key, std::string>)
    {
      // djb2
      unsigned long hash = 5381;
      for (auto ch : key) 
      {
          hash = (hash << 5) + hash + ch; /* hash * 33 + c */
      }
      return hash % array_size;
    }
  }
  
  auto fetch(Key key)
  {
    auto index = getIndex(key);
    return contents[index].data;
  }
};

int main()
{
    cache<1024, int, float> c;
    c.fetch(10);
}




#include <cstdio>
#include <iostream>

template <int I>
struct s : private s<I-1>
{
  void print()
  {
     s<I-1>::print();
  }
};

template<>
struct s<0>
{
   void print()
   {
      std::cout << 0;
   		//s<1>::print();
   }
};

int main()
{
    s<2> ss;
   ss.print();
}

=======================================================================================================
#include <iostream>
#include <array>
#include <type_traits>
#include <optional>

template <typename Key, typename Value, int size>
struct MemoryModel 
{
  struct cache_content
  {
    bool dirty_bit;
    bool valid;
    Value data;
  };
  
  constexpr static auto array_size = size/sizeof(cache_content);
  std::array<cache_content, array_size> contents;
  
  auto getIndex(Key key)
  {
    if constexpr (std::is_arithmetic_v<Key>)
    {
      return static_cast<unsigned long>(key) % array_size;
    }
    else if constexpr (std::is_same_v<Key, std::string>)
    {
      // djb2
      unsigned long hash = 5381;
      for (auto ch : key) 
      {
          hash = (hash << 5) + hash + ch; /* hash * 33 + c */
      }
      return hash % array_size;
    }
  }
  
  virtual std::optional<Value> fetch (Key key) = 0;
  virtual bool store(Key key, Value value) = 0;
  
  virtual ~MemoryModel() {}
};

template <typename Key, typename Value, int size>
struct CacheModel : MemoryModel<Key, Value, size>
{
    using MemoryModel<Key, Value, size>::contents;
    using MemoryModel<Key, Value, size>::getIndex;
	std::optional<Value> fetch (Key key)
    {
    	auto index = getIndex(key);
        if (contents[index].valid)
        {
        	return contents[index].data;
        }
        
        return std::nullopt;
    }
    
    bool store(Key key, Value value)
    {
    	auto index = getIndex(key);
        contents[index].data = value;
        contents[index].dirty_bit = true;
        contents[index].valid = true;
        return true;
    }
};

template <typename Key, typename Value, int I, int  ...sizes>
struct MultiLevelCache : MultiLevelCache<Key, Value, sizes...>
{
   using MM = CacheModel<Key, Value, I>;
   MM m;
   
   std::optional<Value> fetch(Key key)
   {
      if (auto value = m.fetch(key); value.has_value())
      {
        return value;
      }
      return MultiLevelCache<Key, Value, sizes...>::fetch(key);
   }
};

template <typename Key, typename Value, int I>
struct MultiLevelCache<Key, Value, I>
{
   using MM = CacheModel<Key, Value, I>;
   MM m;
  
   std::optional<Value> fetch(Key key)
   {
      return m.fetch(key);
   }
};

int main()
{ 
  MultiLevelCache<int, int, 1024, 4096> mm;
  mm.fetch(88);
}
==================================================================================================================================


#include <iostream>
#include <fstream>
#include <iterator>
#include <vector>
#include <fstream>
#include <iterator>
#include <string>
#include <sstream>

std::string fetch(unsigned long key)
{
	std::ifstream ifs("dataset1.csv");
	std::string skey = std::to_string(key);
	if (ifs)
	{
		std::string line;
		while (std::getline(ifs, line))
		{
			std::stringstream ss(line);
			char delimiter = ',';
			std::string token;
			std::vector<std::string> v;
			while (std::getline(ss, token, delimiter))
			{
				v.push_back(token);
			}

			if (v[0] == skey)
			{
				return line;
			}
		}
	}
	return std::string();
}

void store(unsigned long key, std::string value)
{
	std::ifstream ifs("dataset1.csv");
	std::ofstream temp;
	temp.open("temp.txt");
	std::string skey = std::to_string(key);
	if (ifs && temp)
	{
		std::string line;
		while (std::getline(ifs, line))
		{
			std::stringstream ss(line);
			char delimiter = ',';
			std::string token;
			std::vector<std::string> v;
			while (std::getline(ss, token, delimiter))
			{
				v.push_back(token);
			}

			if (v[0] == skey)
			{
				temp << value << "\n";
			}
			else
			{
				temp << line << "\n";
			}
		}
	}

	ifs.close();
	temp.close();

	std::remove("dataset1.csv");
	std::rename("temp.txt", "dataset1.csv");
}

int main()
{
	//for (unsigned int i=1; i < 10; ++i)
		std::cout << fetch(1) << std::endl;

	store(1000, "fyhfjjffffjfjjjfff");
	return 0;
}
=========================================================================================================================

#include <iostream>
#include <array>
#include <type_traits>
#include <optional>

template <typename Key, typename Value>
struct MemoryModel 
{ 
  virtual std::optional<Value> fetch (Key key) = 0;
  virtual bool store(Key key, Value value) = 0;
  
  virtual ~MemoryModel() {}
};

template <typename Key, typename Value, int size>
struct CacheModel : MemoryModel<Key, Value>
{
	struct cache_content
  	{
	    bool dirty_bit;
	    bool valid;
	    Value data;
	};
	  
	constexpr static auto array_size = size/sizeof(cache_content);
	std::array<cache_content, array_size> contents;

	auto getIndex(Key key)
    {
      if constexpr (std::is_arithmetic_v<Key>)
      {
        return static_cast<unsigned long>(key) % array_size;
      }
      else if constexpr (std::is_same_v<Key, std::string>)
      {
        // djb2
        unsigned long hash = 5381;
        for (auto ch : key) 
        {
            hash = (hash << 5) + hash + ch; /* hash * 33 + c */
        }
        return hash % array_size;
      }
    }

	std::optional<Value> fetch (Key key)
    {
    	auto index = getIndex(key);
        if (contents[index].valid)
        {
        	return contents[index].data;
        }
        
        return std::nullopt;
    }
    
    bool store(Key key, Value value)
    {
    	auto index = getIndex(key);
        contents[index].data = value;
        contents[index].dirty_bit = true;
        contents[index].valid = true;
        return true;
    }
};

template <typename Key, typename Value, int size>
struct FileMemory : MemoryModel<Key, Value, size>
{
	std::optional<Value> fetch(Key key)
	{
		std::ifstream ifs("memory.csv");
		std::string skey = std::to_string(key);
		if (ifs)
		{
			std::string line;
			while (std::getline(ifs, line))
			{
				std::stringstream ss(line);
				char delimiter = ',';
				std::string token;
				std::vector<std::string> v;
				while (std::getline(ss, token, delimiter))
				{
					v.push_back(token);
				}

				if (v[0] == skey)
				{
					return line;
				}
			}
		}
		return std::nullopt;
	}

void store(Key key, Value value)
{
	std::ifstream ifs("dataset1.csv");
	std::ofstream temp;
	temp.open("temp.txt");
	std::string skey = std::to_string(key);
	if (ifs && temp)
	{
		std::string line;
		while (std::getline(ifs, line))
		{
			std::stringstream ss(line);
			char delimiter = ',';
			std::string token;
			std::vector<std::string> v;
			while (std::getline(ss, token, delimiter))
			{
				v.push_back(token);
			}

			if (v[0] == skey)
			{
				temp << value << "\n";
			}
			else
			{
				temp << line << "\n";
			}
		}
	}

	ifs.close();
	temp.close();

	std::remove("dataset1.csv");
	std::rename("temp.txt", "dataset1.csv");
}

};

template <typename Key, typename Value, int I, int  ...sizes>
struct MultiLevelCache : MultiLevelCache<Key, Value, sizes...>
{
   using MM = CacheModel<Key, Value, I>;
   MM m;
   
   std::optional<Value> fetch(Key key)
   {
      if (auto value = m.fetch(key); value.has_value())
      {
        return value;
      }
      return MultiLevelCache<Key, Value, sizes...>::fetch(key);
   }
};

template <typename Key, typename Value, int I>
struct MultiLevelCache<Key, Value, I>
{
   using MM = CacheModel<Key, Value, I>;
   MM m;
  
   std::optional<Value> fetch(Key key)
   {
      return m.fetch(key);
   }
};

int main()
{ 
  MultiLevelCache<int, int, 1024, 4096> mm;
  mm.fetch(88);
}

=========================================================================================================================
