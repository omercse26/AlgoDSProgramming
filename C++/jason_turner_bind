#include <utility>
#include <functional>

template <int I>
struct placeholder {};

template <typename T>
struct Bind
{
  	template <typename... Args>
	constexpr decltype(auto) operator() (Args && ... param) const
    {
      return t(std::forward<decltype(param)>(param)...);
    }
  
  	T t;
};

template <typename T> Bind(T) -> Bind<T>;

template <int I, typename T>
constexpr decltype(auto) getparam(const placeholder<I>&,  T&& t)
{
  return std::get<I>(t);
}

template <typename P, typename T>
constexpr decltype(auto) getparam(P &&p, T&&)
{
  return std::forward<P>(p);
}

template <typename P, typename T>
constexpr decltype(auto) getparam(const Bind<P>& b, T&& t)
{
 return std::apply(b, std::forward<T>(t)); 
}

constexpr auto bind = [](auto&& c, auto && ... p)
{
  return Bind {
      [ c = std::forward<decltype(c)>(c),
        p = std::make_tuple(std::forward<decltype(p)>(p)...)
      ]
      (auto && ... v)
    {
      return std::invoke(c, getparam(p, v)...);
    }
  };
};

int add(int a, int b)
{
  return a+b;
}

int main()
{
    constexpr auto _0 = placeholder<0>{};
    constexpr auto _1 = placeholder<1>{};
  
    auto f = bind(add, _0, 3);
  
    //f(0);
}
/*
workaround to capture parameter packs in a lambda
https://stackoverflow.com/questions/47496358/c-lambdas-how-to-capture-variadic-parameter-pack-from-the-upper-scope?rq=1

*/

///// interesting parameter expansion pattern
// from: https://arne-mertz.de/2016/11/more-variadic-templates/ 

#include <utility>
#include <tuple>

template <class T, class... Args>
auto pairWithRest(T const& t, Args const&... args) {
    return std::make_tuple(std::make_pair(t, args)...);
}

template <class... Args>
auto selfCartesianProduct(Args const&... args) {
    return std::tuple_cat(pairWithRest(args, args...)...);
}

auto cp = selfCartesianProduct(1, 0.5);

